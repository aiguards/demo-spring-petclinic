name: Generate Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'src/main/java/**/*.java'  # Only trigger on Java file changes in main source
      - '!src/main/java/**/*Test.java'  # Ignore test files
      - '!src/test/**'  # Ignore files in test directory

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Get changed files
      id: changed-files
      run: |
        # Get list of changed Java files from the last commit
        FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^src/main/java/.*\.java$" || true)
        echo "Changed Java files:"
        echo "$FILES"
        echo "files=$FILES" >> $GITHUB_OUTPUT

    - name: Generate tests for changed files
      if: steps.changed-files.outputs.files != ''
      run: |
        # Read the list of changed files
        IFS=$'\n'
        for file in ${{ steps.changed-files.outputs.files }}; do
          echo "Generating tests for: $file"
          python - <<EOF
import requests
import sys

def create_test_pr(file_path):
    print(f"Creating PR with tests for: {file_path}")
    
    data = {
        "file_path": file_path,
        "base_branch": "${{ github.ref_name }}"
    }

    try:
        response = requests.post(
                '${{ secrets.TEST_GENERATOR_URL }}/api/create-pr-from-path',
                json=data,
                headers={
                    'Authorization': 'Bearer ${{ secrets.API_TOKEN }}',
                    'X-GitHub-Repository': '${{ github.repository }}',
                    'X-GitHub-Sha': '${{ github.sha }}'
                }
            )
        print(f"Response status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"Successfully created PR: {result['pr_url']}")
        else:
            print(f"Error: {response.text}")
            sys.exit(1)
            
    except Exception as e:
        print(f"Error creating PR: {e}")
        sys.exit(1)

create_test_pr("$file")
EOF
        done
